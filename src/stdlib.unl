(set-fn
 funcall
 (lambda (f & args)
   (apply f args)))

(set-fn
 append
 (lambda (x y)
   (if (emptyp x)
       y
       (cons (first x)
             (append (rest x) y)))))

(set-fn
 reduce
 (lambda (f init list)
   (if (emptyp list)
       init
       (reduce
        f
        (funcall f init (first list))
        (rest list)))))

(set-fn
 reverse-inner
 (lambda (x acc)
   (if (emptyp x)
       acc
       (reverse-inner
        (rest x)
        (cons (first x) acc)))))

(set-fn
 reverse
 (lambda (x)
   (reverse-inner x ())))

(set-fn
 not
 (lambda (x)
   (if x nil t)))

(set-macro-fn
 qquote
 (lambda (x)
   (qquote-process x)))

(set-fn
 qquote-process
 (lambda (x)
   (if (not (listp x))
       (list (quote quote) x)
       (if (emptyp x)
           (list (quote quote) x)
           (if (equal (first x) (quote unq))
               (first (rest x))
               (if (equal (first x) (quote unqs))
                (error "unqs after qquote")
                (qquote-transform-list x)))))))

(set-fn
 qquote-transform-list
 (lambda (x)
   (qquote-transform-list-inner x ())))

(set-fn
 qquote-transform-list-inner
 (lambda (x transformed-acc)
   (if (emptyp x)
       (list* (quote reduce) (quote (lambda (x y) (append x y)))
              ()
              (list (cons (quote list) (reverse transformed-acc))))
       (qquote-transform-list-inner
        (rest x)
        (cons (qquote-transform-list-item (first x))
              transformed-acc)))))

(set-fn
 qquote-transform-list-item
 (lambda (x)
   (if (not (listp x))
       (list (quote list) (list (quote quote) x))
       (if (emptyp x)
           (list (quote list) (list (quote quote) x))
           (if (equal (first x) (quote unq))
               (list (quote list) (first (rest x)))
               (if (equal (first x) (quote unqs))
                   (first (rest x))
                   (list (quote list) (qquote-process x))))))))

(set-macro-fn
 defmacro
 (lambda (name args & body)
   (qquote
    (set-macro-fn
     (unq name)
     (lambda (unq args)
       (unqs body))))))

(defmacro defun (name args & body)
  (qquote
   (set-fn
    (unq name)
    (lambda (unq args)
      (unqs body)))))

(defun fibo (n)
  (if (equal n 1)
      1
      (if (equal n 0)
          1
          (add (fibo (sub n 1))
               (fibo (sub n 2))))))

(defmacro strange-let (bindings & body)
  (reduce
   (lambda (acc binding)
     (let ((sym (first binding))
           (val (first (rest binding))))
       (qquote
        ((lambda ((unq sym))
           (unq acc))
         (unq val)))))
   (qquote (let () (unqs body)))
   (reverse bindings)))

(defmacro symf (sym)
  (qquote
   (symbol-function (unq sym))))

(defun mapcar (f & lists)
  (let ((multicar (lambda (lists)
                    (if (emptyp lists)
                        (list () ())
                        (let ((lst (first lists)))
                          (if (emptyp lst)
                              (list () ())
                              (let ((head (first lst))
                                    (tail (rest lst))
                                    (multicars (funcall multicar (rest lists))))
                                (list (cons head (first multicars))
                                      (cons tail (first (rest multicars))))))))))
        (mc (funcall multicar lists))
        (heads (first mc))
        (tails (first (rest mc))))
    (if (emptyp heads)
        ()
        (cons (apply f heads)
              (apply (symf mapcar) f tails)))))

(defmacro cond (& clauses)
  (reduce
   (lambda (acc clause)
     (qquote
      (if (unq (first clause))
          (let ()
            (unqs (rest clause)))
          (unq acc))))
   (quote nil)
   (reverse clauses)))

(defmacro and (& forms)
  (let ((reversed (if (emptyp forms)
                      (list t)
                      (reverse forms))))
    (reduce
     (lambda (acc form)
       (qquote
        (if (unq form) (unq acc) nil)))
     (first reversed)
     (rest reversed))))

(defmacro or (& forms)
  (let ((reversed (if (emptyp forms)
                      (list nil)
                      (reverse forms))))
    (reduce
     (lambda (acc form)
       (qquote
        (let ((eform (unq form)))
          (if eform eform (unq acc)))))
     (first reversed)
     (rest reversed))))

(defmacro when (c & body)
  (qquote
   (if (unq c)
       (let ()
         (unqs body)))))
